{"ast":null,"code":"import axios from 'axios';\nconst REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nconst TODO_msgShow = 'TODO_msgShow';\nconst TODO_FAIL = 'TODO_FAIL';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst LOGIN_SUCCESS_ADMIN = 'LOGIN_SUCCESS_ADMIN';\nconst GET_USER_INFO = 'GET_USER_INFO';\nconst LOGIN_OUT_SUCCESS = 'LOGIN_OUT_SUCCESS';\nconst RESET = 'RESET';\nlet initState = {\n  redirectTo: '',\n  username: '',\n  password: '',\n  repassword: '',\n  type: '',\n  msg: '',\n  msgShow: false,\n  isLogin: false\n};\nexport function user(state = initState, action) {\n  switch (action.type) {\n    case REGISTER_SUCCESS:\n      return { ...state,\n        ...action.payload,\n        msg: '',\n        redirectTo: '/login'\n      };\n\n    case TODO_msgShow:\n      return { ...state,\n        ...action.payload\n      };\n\n    case TODO_FAIL:\n      return { ...state,\n        ...action.payload\n      };\n\n    case LOGIN_SUCCESS:\n      return { ...state,\n        ...action.payload,\n        msg: '',\n        redirectTo: '/app'\n      };\n\n    case LOGIN_SUCCESS_ADMIN:\n      return { ...state,\n        ...action.payload,\n        msg: '',\n        redirectTo: '/result'\n      };\n\n    case LOGIN_OUT_SUCCESS:\n      return { ...state,\n        ...action.payload\n      };\n\n    case GET_USER_INFO:\n      return { ...state,\n        ...action.payload\n      };\n\n    case RESET:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction registerFail(data) {\n  data.msgShow = true;\n  return {\n    payload: data,\n    type: TODO_msgShow\n  };\n}\n\nfunction registerSuccess(data) {\n  return {\n    payload: data,\n    type: REGISTER_SUCCESS\n  };\n}\n\nfunction toDoFail(data) {\n  data.msgShow = true;\n  return {\n    payload: data,\n    type: TODO_FAIL\n  };\n}\n\nfunction loginSuccess(data) {\n  if (data.type === 'admin') {\n    return {\n      payload: data,\n      type: LOGIN_SUCCESS_ADMIN\n    };\n  } else {\n    return {\n      payload: data,\n      type: LOGIN_SUCCESS\n    };\n  }\n}\n\nfunction loginOutSuccess(data) {\n  data.msgShow = true;\n  return {\n    payload: data,\n    type: LOGIN_OUT_SUCCESS\n  };\n}\n\nexport function reset() {\n  let data = {\n    msgShow: false\n  };\n  return {\n    payload: data,\n    type: RESET\n  };\n}\nexport function register({\n  username,\n  password,\n  repassword,\n  type\n}) {\n  return dispatch => {\n    if (!username || !password) {\n      return dispatch(registerFail({\n        msg: 'Empty username or password.'\n      }));\n    }\n\n    if (password !== repassword) {\n      return dispatch(registerFail({\n        msg: 'Passwords do not match.'\n      }));\n    }\n\n    axios.post('/user/register', {\n      username,\n      password,\n      type\n    }).then(res => {\n      if (res.status === 200 && res.data.code === 0) {\n        dispatch(registerSuccess(res.data.user));\n      } else {\n        dispatch(registerFail(res.data));\n      }\n    });\n  };\n}\nexport function login({\n  username,\n  password\n}) {\n  if (!username || !password) {\n    return toDoFail({\n      msg: 'Empty username or password.'\n    });\n  }\n\n  return dispatch => {\n    axios.post('/user/login', {\n      username,\n      password\n    }).then(res => {\n      if (res.status === 200 && res.data.code === 0) {\n        res.data.user.isLogin = true;\n        dispatch(loginSuccess(res.data.user));\n      } else {\n        dispatch(toDoFail(res.data));\n      }\n    });\n  };\n}\nexport function getUserInfo(userInfo) {\n  return {\n    type: GET_USER_INFO,\n    payload: userInfo\n  };\n}\nexport function loginOut() {\n  return dispatch => {\n    axios.get('/user/loginOut').then(res => {\n      if (res.status === 200 && res.data.code === 0) {\n        let delState = {\n          redirectTo: '/login',\n          username: '',\n          password: '',\n          repassword: '',\n          type: '',\n          msg: res.data.msg,\n          isLogin: false\n        };\n        dispatch(loginOutSuccess(delState));\n      } else {\n        dispatch(toDoFail(res.data.message));\n      }\n    });\n  };\n}\nexport function pushHis({\n  history\n}) {\n  return dispatch => {\n    if (!history) {\n      return dispatch(toDoFail({\n        msg: 'Empty history.'\n      }));\n    }\n\n    axios.post('/user/pushHis', {\n      history\n    }).then(res => {\n      if (res.status === 200) {} else {\n        dispatch(toDoFail(res.data));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/Users/kirito/Desktop/gambling/src/redux/user.redux.js"],"names":["axios","REGISTER_SUCCESS","TODO_msgShow","TODO_FAIL","LOGIN_SUCCESS","LOGIN_SUCCESS_ADMIN","GET_USER_INFO","LOGIN_OUT_SUCCESS","RESET","initState","redirectTo","username","password","repassword","type","msg","msgShow","isLogin","user","state","action","payload","registerFail","data","registerSuccess","toDoFail","loginSuccess","loginOutSuccess","reset","register","dispatch","post","then","res","status","code","login","getUserInfo","userInfo","loginOut","get","delState","message","pushHis","history"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nconst TODO_msgShow = 'TODO_msgShow';\nconst TODO_FAIL = 'TODO_FAIL';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst LOGIN_SUCCESS_ADMIN = 'LOGIN_SUCCESS_ADMIN';\nconst GET_USER_INFO = 'GET_USER_INFO';\nconst LOGIN_OUT_SUCCESS = 'LOGIN_OUT_SUCCESS';\nconst RESET = 'RESET';\nlet initState = {\n    redirectTo: '',\n    username: '',\n    password: '',\n    repassword: '',\n    type: '',\n    msg: '',\n    msgShow:false,\n    isLogin: false\n};\n\nexport function user(state=initState, action) {\n    switch (action.type) {\n        case REGISTER_SUCCESS:\n            return {...state,...action.payload, msg: '', redirectTo: '/login'};\n        case TODO_msgShow:\n            return {...state,...action.payload};\n        case TODO_FAIL:\n            return  {...state,...action.payload};\n        case LOGIN_SUCCESS:\n            return {...state,...action.payload, msg: '', redirectTo: '/app'};\n        case LOGIN_SUCCESS_ADMIN:\n            return {...state,...action.payload, msg: '', redirectTo: '/result'};\n        case LOGIN_OUT_SUCCESS:\n            return {...state,...action.payload};\n        case GET_USER_INFO:\n            return {...state,...action.payload};\n        case RESET:\n            return {...state,...action.payload};\n        default:\n            return state;\n    }\n}\n\nfunction registerFail(data) {\n    data.msgShow = true;\n    return {\n        payload:data,\n        type: TODO_msgShow\n    }\n}\n\nfunction registerSuccess(data) {\n    return {\n        payload:data,\n        type: REGISTER_SUCCESS\n    }\n}\n\nfunction toDoFail(data){\n    data.msgShow = true;\n    return {\n        payload:data,\n        type: TODO_FAIL\n    }\n}\n\nfunction loginSuccess(data){\n    if(data.type === 'admin')\n    {\n        return {\n            payload:data,\n            type: LOGIN_SUCCESS_ADMIN\n        }\n    }\n    else\n    {\n        return {\n            payload:data,\n            type: LOGIN_SUCCESS\n        }\n    }\n}\n\nfunction loginOutSuccess(data) {\n    data.msgShow = true;\n    return {\n        payload:data,\n        type: LOGIN_OUT_SUCCESS\n    }\n}\n\nexport function reset(){\n    let data = {\n        msgShow : false\n    }\n    return {\n        payload:data,\n        type: RESET\n    }\n}\n\nexport function register({username,password,repassword,type}) {\n    return dispatch => {\n        if(!username || !password) {\n            return dispatch(registerFail({msg:'Empty username or password.'}))\n        }\n        if(password !== repassword) {\n            return dispatch(registerFail({msg:'Passwords do not match.'}))\n        }\n\n        axios.post('/user/register',{username,password,type})\n            .then(res => {\n                if(res.status === 200 && res.data.code === 0) {\n                    dispatch(registerSuccess(res.data.user))\n                }else {\n                    dispatch(registerFail(res.data))\n                }\n            })\n    }\n}\n\nexport function login({username,password}) {\n    if(!username || !password) {\n        return toDoFail({msg:'Empty username or password.'})\n    }\n    return dispatch => {\n        axios.post('/user/login',{username,password})\n            .then(res => {\n                if(res.status === 200 && res.data.code === 0) {\n                    res.data.user.isLogin = true;\n                    dispatch(loginSuccess(res.data.user))\n                }else {\n                    dispatch(toDoFail(res.data))\n                }\n            })\n    }\n}\n\nexport function getUserInfo(userInfo) {\n    return {\n        type: GET_USER_INFO,\n        payload: userInfo\n\n    }\n}\n\nexport function loginOut() {\n    return dispatch => {\n        axios.get('/user/loginOut')\n            .then(res => {\n                if (res.status === 200 && res.data.code === 0) {\n                    let delState = {\n                        redirectTo: '/login',\n                        username: '',\n                        password: '',\n                        repassword: '',\n                        type: '',\n                        msg: res.data.msg,\n                        isLogin: false\n                    };\n                    dispatch(loginOutSuccess(delState))\n                } else {\n                    dispatch(toDoFail(res.data.message))\n                }\n            })\n    }\n}\n\nexport function pushHis({history}) {\n    return dispatch => {\n        if(!history) {\n            return dispatch(toDoFail({msg:'Empty history.'}))\n        }\n        axios.post('/user/pushHis', {history})\n            .then(res => {\n                if (res.status === 200) {\n\n                } else {\n                    dispatch(toDoFail(res.data))\n                }\n            });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}