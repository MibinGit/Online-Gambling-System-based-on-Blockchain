{"ast":null,"code":"var _dec, _class;\n\nimport { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport { getWeb3 } from '../redux/web3.redux';\nimport { getContract } from '../redux/contract.redux';\nimport { connect } from 'react-redux';\nimport Web3 from 'web3';\nimport { default as contract } from 'truffle-contract';\nimport gambling0Artifact from '../../build/contracts/gambling0.json';\nconst gambling0 = contract(gambling0Artifact);\nlet CheckWeb3 = (_dec = connect(state => state, {\n  getWeb3,\n  getContract\n}), _dec(_class = withRouter(_class = class CheckWeb3 extends Component {\n  componentDidMount() {\n    var self = this;\n    var web3 = new Web3('ws://localhost:7545');\n    window.addEventListener('load', async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        let ethereum = window.ethereum;\n        let userAddress;\n        let balance;\n        let web3Data;\n        let contractData;\n        let g0;\n        let g0Address;\n        let pool0;\n        let props = this.props;\n        window.web3 = new Web3(ethereum);\n\n        try {\n          // Request account access if needed\n          await ethereum.enable();\n          getWeb3Data(self.props); // // web3\n          // await window.web3.eth.getAccounts(function (err, accs) {\n          //     userAddress = accs[0];\n          // });\n          // // console.log(userAddress)\n          // // await window.web3.eth.getBalance(userAddress, function (err, balc) {\n          // //     balance = balc;\n          // // });\n          // web3Data = {\n          //     'web3': window.web3,\n          //     'address': userAddress,\n          //     'balance': 1\n          // };\n          // props.getWeb3(web3Data);\n          // //contract\n          // await gambling0.setProvider(web3.currentProvider);\n          //\n          // await gambling0.deployed().then(function(instance){\n          //     g0 = instance;\n          //     g0Address = g0.address;\n          // });\n          // await window.web3.eth.getBalance(g0Address, function (err, balc) {\n          //     pool0 = balc;\n          // });\n          // contractData = {\n          //     'g0' : gambling0,\n          //     'g0Address' : g0Address,\n          //     'pool0' : pool0\n          // };\n          // props.getContract(contractData);\n          // window.web3.eth.sendTransaction({/* ... */});\n        } catch (error) {// User denied account access...\n        }\n      } // Legacy dapp browsers...\n      else if (window.web3) {\n          window.web3 = new Web3(web3.currentProvider); // Acccounts always exposed\n\n          window.web3.eth.sendTransaction({\n            /* ... */\n          });\n        } // Non-dapp browsers...\n        else {\n            console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n          }\n    });\n    window.ethereum.on('accountsChanged', function () {\n      getWeb3Data(self.props);\n    });\n  } // getWeb3Data() {\n  //     var props = this.props;\n  //     var userAddress;\n  //     var balance;\n  //     var web3Data;\n  //     var contractData;\n  //     let g0;\n  //     var g0Address;\n  //     var pool0;\n  //     var web3;\n  //     if (window.ethereum) {\n  //         let ethereum = window.ethereum;\n  //         web3 = new Web3(ethereum);\n  //     }\n  //\n  //     window.web3.eth.getAccounts(function (err, accs) {\n  //         userAddress = accs[0];\n  //         window.web3.eth.getBalance(userAddress, function (err, balc) {\n  //             balance = balc;\n  //             gambling0.setProvider(web3.currentProvider);\n  //             gambling0.deployed().then(function (instance) {\n  //                 g0 = instance;\n  //                 g0Address = g0.address;\n  //                 window.web3.eth.getBalance(g0Address, function (err, balc) {\n  //                     pool0 = balc;\n  //                     web3Data = {\n  //                         'web3': window.web3,\n  //                         'address': userAddress,\n  //                         'balance': balance\n  //                     };\n  //                     contractData = {\n  //                         'g0' : gambling0,\n  //                         'g0Address': g0Address,\n  //                         'pool0': pool0\n  //                     };\n  //                     props.getWeb3(web3Data);\n  //                     props.getContract(contractData);\n  //                 });\n  //             });\n  //         });\n  //     });\n  //\n  // }\n\n\n  render() {\n    return null;\n  }\n\n}) || _class) || _class);\nexport function getWeb3Data1(props) {\n  var userAddress;\n  var balance;\n  var web3Data;\n  var contractData;\n  let g0;\n  let g0Address;\n  let admin;\n  var pool0;\n  var web3;\n  let wnum;\n\n  if (window.ethereum) {\n    let ethereum = window.ethereum;\n    web3 = new Web3(ethereum);\n  }\n\n  window.web3.eth.getAccounts(function (err, accs) {\n    userAddress = accs[0];\n    window.web3.eth.getBalance(userAddress, function (err, balc) {\n      balance = balc;\n      gambling0.setProvider(web3.currentProvider);\n      gambling0.deployed().then(function (instance) {\n        g0 = instance;\n        g0Address = g0.address; // window.web3.eth.getBalance(g0Address, function (err, balc) {\n\n        g0.getMoneyNum.call({\n          from: userAddress\n        }).then(function (balc) {\n          pool0 = balc;\n          web3Data = {\n            'web3': window.web3,\n            'address': userAddress,\n            'balance': balance\n          };\n          contractData = {\n            'g0': g0,\n            'g0Address': g0Address,\n            'pool0': pool0\n          };\n          props.getWeb3(web3Data);\n          props.getContract(contractData);\n        }); // g0.getwin.call({from : userAddress}).then(function (num) {\n        //     wnum = num\n        //     web3Data = {\n        //         'web3': window.web3,\n        //         'address': userAddress,\n        //         'balance': balance\n        //     };\n        //     contractData = {\n        //         'g0' : g0,\n        //         'g0Address': g0Address,\n        //         'pool0': pool0,\n        //         'wnum' : num\n        //     };\n        //     props.getWeb3(web3Data);\n        //     props.getContract(contractData);\n        // })\n      });\n    });\n  });\n}\nexport async function getWeb3Data(props) {\n  let userAddress;\n  let balance;\n  let web3Data;\n  let contractData;\n  let g0;\n  let g0Address;\n  let pool0;\n  let web3;\n  let wnum;\n\n  if (window.ethereum) {\n    let ethereum = window.ethereum;\n    web3 = new Web3(ethereum);\n  }\n\n  await window.web3.eth.getAccounts(function (err, accs) {\n    userAddress = accs[0];\n  }); // await window.web3.eth.getBalance(userAddress, function (err, balc) {\n  //     balance = balc;\n  // });\n\n  await gambling0.setProvider(web3.currentProvider);\n  await gambling0.deployed().then(function (instance) {\n    g0 = instance;\n    g0Address = g0.address;\n  }); // await window.web3.eth.getBalance(g0Address, function (err, balc) {\n  //     pool0 = balc;\n  // });\n\n  await g0.getMoneyNum.call({\n    from: userAddress\n  }).then(function (balc) {\n    pool0 = balc;\n  }); // await window.web3.eth.getwin()\n  // await g0.getwin.call({from:userAddress}).then(function (num) {\n  //     wnum = num\n  // });\n\n  await g0.getwin.call({\n    from: userAddress\n  }).then(function (num) {\n    wnum = num;\n    web3Data = {\n      'web3': window.web3,\n      'address': userAddress,\n      'balance': balance\n    };\n    contractData = {\n      'g0': g0,\n      'g0Address': g0Address,\n      'pool0': pool0,\n      'wnum': num\n    };\n    props.getWeb3(web3Data);\n    props.getContract(contractData);\n  });\n  web3Data = {\n    'web3': window.web3,\n    'address': userAddress,\n    'balance': balance\n  };\n  contractData = {\n    'gambling0': gambling0,\n    'g0': g0,\n    'g0Address': g0Address,\n    'pool0': pool0,\n    'wnum': wnum\n  };\n  props.getWeb3(web3Data);\n  props.getContract(contractData);\n}\nexport default CheckWeb3;","map":{"version":3,"sources":["/Users/kirito/Desktop/gambling/src/components/checkWeb3.js"],"names":["Component","withRouter","getWeb3","getContract","connect","Web3","default","contract","gambling0Artifact","gambling0","CheckWeb3","state","componentDidMount","self","web3","window","addEventListener","ethereum","userAddress","balance","web3Data","contractData","g0","g0Address","pool0","props","enable","getWeb3Data","error","currentProvider","eth","sendTransaction","console","log","on","render","getWeb3Data1","admin","wnum","getAccounts","err","accs","getBalance","balc","setProvider","deployed","then","instance","address","getMoneyNum","call","from","getwin","num"],"mappings":"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","sourcesContent":["import {Component} from 'react';\nimport {withRouter} from 'react-router';\nimport {getWeb3} from '../redux/web3.redux';\nimport {getContract} from '../redux/contract.redux';\nimport {connect} from 'react-redux';\nimport Web3 from 'web3';\nimport { default as contract } from 'truffle-contract';\nimport gambling0Artifact from '../../build/contracts/gambling0.json';\n\nconst gambling0 = contract(gambling0Artifact);\n@connect (\n    state => state,\n    {getWeb3,getContract}\n)\n\n@withRouter\nclass CheckWeb3 extends Component {\n    componentDidMount(){\n        var self = this;\n        var web3 = new Web3('ws://localhost:7545');\n        window.addEventListener('load', async () => {\n            // Modern dapp browsers...\n            if (window.ethereum) {\n                let ethereum = window.ethereum;\n                let userAddress;\n                let balance;\n                let web3Data;\n                let contractData;\n                let g0;\n                let g0Address;\n                let pool0;\n                let props = this.props\n                window.web3 = new Web3(ethereum);\n                try {\n                    // Request account access if needed\n                    await ethereum.enable();\n                    getWeb3Data(self.props)\n                    // // web3\n                    // await window.web3.eth.getAccounts(function (err, accs) {\n                    //     userAddress = accs[0];\n                    // });\n                    // // console.log(userAddress)\n                    // // await window.web3.eth.getBalance(userAddress, function (err, balc) {\n                    // //     balance = balc;\n                    // // });\n                    // web3Data = {\n                    //     'web3': window.web3,\n                    //     'address': userAddress,\n                    //     'balance': 1\n                    // };\n                    // props.getWeb3(web3Data);\n                    // //contract\n                    // await gambling0.setProvider(web3.currentProvider);\n                    //\n                    // await gambling0.deployed().then(function(instance){\n                    //     g0 = instance;\n                    //     g0Address = g0.address;\n                    // });\n                    // await window.web3.eth.getBalance(g0Address, function (err, balc) {\n                    //     pool0 = balc;\n                    // });\n                    // contractData = {\n                    //     'g0' : gambling0,\n                    //     'g0Address' : g0Address,\n                    //     'pool0' : pool0\n                    // };\n                    // props.getContract(contractData);\n                    // window.web3.eth.sendTransaction({/* ... */});\n                } catch (error) {\n                    // User denied account access...\n                }\n\n            }\n            // Legacy dapp browsers...\n            else if (window.web3) {\n                window.web3 = new Web3(web3.currentProvider);\n                // Acccounts always exposed\n                window.web3.eth.sendTransaction({/* ... */});\n            }\n            // Non-dapp browsers...\n            else {\n                console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n            }\n        });\n\n        window.ethereum.on('accountsChanged', function () {\n            getWeb3Data(self.props)\n        });\n    }\n    // getWeb3Data() {\n    //     var props = this.props;\n    //     var userAddress;\n    //     var balance;\n    //     var web3Data;\n    //     var contractData;\n    //     let g0;\n    //     var g0Address;\n    //     var pool0;\n    //     var web3;\n    //     if (window.ethereum) {\n    //         let ethereum = window.ethereum;\n    //         web3 = new Web3(ethereum);\n    //     }\n    //\n    //     window.web3.eth.getAccounts(function (err, accs) {\n    //         userAddress = accs[0];\n    //         window.web3.eth.getBalance(userAddress, function (err, balc) {\n    //             balance = balc;\n    //             gambling0.setProvider(web3.currentProvider);\n    //             gambling0.deployed().then(function (instance) {\n    //                 g0 = instance;\n    //                 g0Address = g0.address;\n    //                 window.web3.eth.getBalance(g0Address, function (err, balc) {\n    //                     pool0 = balc;\n    //                     web3Data = {\n    //                         'web3': window.web3,\n    //                         'address': userAddress,\n    //                         'balance': balance\n    //                     };\n    //                     contractData = {\n    //                         'g0' : gambling0,\n    //                         'g0Address': g0Address,\n    //                         'pool0': pool0\n    //                     };\n    //                     props.getWeb3(web3Data);\n    //                     props.getContract(contractData);\n    //                 });\n    //             });\n    //         });\n    //     });\n    //\n    // }\n    render(){\n        return null;\n    }\n}\n\nexport function getWeb3Data1(props){\n    var userAddress;\n    var balance;\n    var web3Data;\n    var contractData;\n    let g0;\n    let g0Address;\n    let admin;\n    var pool0;\n    var web3;\n    let wnum;\n\n    if (window.ethereum) {\n        let ethereum = window.ethereum;\n        web3 = new Web3(ethereum);\n    }\n\n    window.web3.eth.getAccounts(function (err, accs) {\n        userAddress = accs[0];\n        window.web3.eth.getBalance(userAddress, function (err, balc) {\n            balance = balc;\n            gambling0.setProvider(web3.currentProvider);\n            gambling0.deployed().then(function (instance) {\n                g0 = instance;\n                g0Address = g0.address;\n                // window.web3.eth.getBalance(g0Address, function (err, balc) {\n                g0.getMoneyNum.call({from:userAddress}).then(function (balc) {\n\n                    pool0 = balc;\n                    web3Data = {\n                        'web3': window.web3,\n                        'address': userAddress,\n                        'balance': balance\n                    };\n                    contractData = {\n                        'g0' : g0,\n                        'g0Address': g0Address,\n                        'pool0': pool0,\n                    };\n                    props.getWeb3(web3Data);\n                    props.getContract(contractData);\n                });\n\n                // g0.getwin.call({from : userAddress}).then(function (num) {\n                //     wnum = num\n                //     web3Data = {\n                //         'web3': window.web3,\n                //         'address': userAddress,\n                //         'balance': balance\n                //     };\n                //     contractData = {\n                //         'g0' : g0,\n                //         'g0Address': g0Address,\n                //         'pool0': pool0,\n                //         'wnum' : num\n                //     };\n                //     props.getWeb3(web3Data);\n                //     props.getContract(contractData);\n                // })\n            });\n        });\n    });\n}\n\nexport async function getWeb3Data(props){\n    let userAddress;\n    let balance;\n    let web3Data;\n    let contractData;\n    let g0;\n    let g0Address;\n    let pool0;\n    let web3;\n    let wnum;\n\n    if (window.ethereum) {\n        let ethereum = window.ethereum;\n        web3 = new Web3(ethereum);\n    }\n\n    await window.web3.eth.getAccounts(function (err, accs) {\n        userAddress = accs[0];\n    });\n\n    // await window.web3.eth.getBalance(userAddress, function (err, balc) {\n    //     balance = balc;\n    // });\n\n    await gambling0.setProvider(web3.currentProvider);\n    await gambling0.deployed().then(function (instance) {\n        g0 = instance;\n        g0Address = g0.address;\n\n    });\n    // await window.web3.eth.getBalance(g0Address, function (err, balc) {\n    //     pool0 = balc;\n    // });\n    await g0.getMoneyNum.call({from:userAddress}).then(function (balc) {\n        pool0 = balc;\n    });\n    // await window.web3.eth.getwin()\n    // await g0.getwin.call({from:userAddress}).then(function (num) {\n    //     wnum = num\n    // });\n    await g0.getwin.call({from:userAddress}).then(function (num) {\n        wnum = num\n        web3Data = {\n            'web3': window.web3,\n            'address': userAddress,\n            'balance': balance\n        };\n        contractData = {\n            'g0' : g0,\n            'g0Address': g0Address,\n            'pool0': pool0,\n            'wnum' : num\n        };\n        props.getWeb3(web3Data);\n        props.getContract(contractData);\n    });\n\n\n    web3Data = {\n        'web3': window.web3,\n        'address': userAddress,\n        'balance': balance\n    };\n\n    contractData = {\n        'gambling0': gambling0,\n        'g0' : g0,\n        'g0Address': g0Address,\n        'pool0': pool0,\n        'wnum' : wnum\n    };\n\n    props.getWeb3(web3Data);\n    props.getContract(contractData);\n\n\n}\nexport default CheckWeb3;\n"]},"metadata":{},"sourceType":"module"}